Clock speed: 25.2 MHz
Pixel rate: 12.6 MHz
Horizontal timing:
	Sync pulse: 48 px
	Back porch: 24 px
	Visible area: 320 px
	Front porch: 8 px
	Total: 400 px
Vertical timing:
	Sync pulse: 2 lines
	Back porch: 33 lines
	Visible area: 480 lines
	Front porch: 10 lines
	Total: 525 lines

Flags:
Zero flag (Z)
Sign flag (S)
Carry flag (K)
Overflow flag (V)
Predicate flag (P)

Registers:

00 - A (general purpose)
01 - B (general purpose)
02 - C (general purpose)
03 - D (general purpose)
04 - E (general purpose)
05 - F (general purpose)
06 - G (general purpose)
07 - Immediate value (as source)
	Zero/Discard (as destination)
10 - APL (pointer A, low word)
11 - APH (pointer A, high word)
12 - BPL (pointer B, low word)
13 - BPH (pointer B, high word)
14 - CPL (pointer C, low word)
15 - CPH (pointer C, high word)
16 - IPL (instruction pointer, low word) *
17 - IPH (instruction pointer, high word) *

* When IPL is read, IPH_tmp is set to the corresponding upper bits. The value that is read points immediately after the current instruction.
  When IPL is written to, write the value to IPL_tmp.
  When IPH is read, return IPH_tmp.
  When IPH is written to, program control flow jumps to IPH:IPL_tmp.
  This is a bit counter-intuitive but it simplifies the assembly required for relative jumps.

Instructions:

000000dddsss - mov  0ddd, 0sss - reg 0ddd = reg 0sss
000001dddsss - and  0ddd, 0sss - reg 0ddd = (reg 0ddd) AND (reg 0sss), set Z,S flags based on result
000010dddsss - or   0ddd, 0sss - reg 0ddd = (reg 0ddd) OR (reg 0sss), set Z,S flags based on result
000011dddsss - xor  0ddd, 0sss - reg 0ddd = (reg 0ddd) XOR (reg 0sss), set Z,S flags based on result
000100dddsss - add  0ddd, 0sss - reg 0ddd = (reg 0ddd) + (reg 0sss), set K,V,Z,S flags based on result
000101dddsss - adk  0ddd, 0sss - reg 0ddd = (reg 0ddd) + (reg 0sss) + K, set K,V,Z,S flags based on result
000110dddsss - sub  0ddd, 0sss - reg 0ddd = (reg 0ddd) - (reg 0sss), set K,V,Z,S flags based on result
000111dddsss - sbk  0ddd, 0sss - reg 0ddd = (reg 0ddd) - (reg 0sss) - K, set K,V,Z,S flags based on result

001000dddsss - mov  0ddd, 1sss - reg 0ddd = reg 1sss
001001dddsss - and  0ddd, 1sss - reg 0ddd = (reg 0ddd) AND (reg 1sss), set Z,S flags based on result
001010dddsss - or   0ddd, 1sss - reg 0ddd = (reg 0ddd) OR (reg 1sss), set Z,S flags based on result
001011dddsss - xor  0ddd, 1sss - reg 0ddd = (reg 0ddd) XOR (reg 1sss), set Z,S flags based on result
001100dddsss - add  0ddd, 1sss - reg 0ddd = (reg 0ddd) + (reg 1sss), set K,V,Z,S flags based on result
001101dddsss - adk  0ddd, 1sss - reg 0ddd = (reg 0ddd) + (reg 1sss) + K, set K,V,Z,S flags based on result
001110dddsss - sub  0ddd, 1sss - reg 0ddd = (reg 0ddd) - (reg 1sss), set K,V,Z,S flags based on result
001111dddsss - sbk  0ddd, 1sss - reg 0ddd = (reg 0ddd) - (reg 1sss) - K, set K,V,Z,S flags based on result

010000dddsss - mov  1ddd, 0sss - reg 1ddd = reg 0sss
010001dddsss - and  1ddd, 0sss - reg 1ddd = (reg 1ddd) AND (reg 0sss), set Z,S flags based on result
010010dddsss - or   1ddd, 0sss - reg 1ddd = (reg 1ddd) OR (reg 0sss), set Z,S flags based on result
010011dddsss - xor  1ddd, 0sss - reg 1ddd = (reg 1ddd) XOR (reg 0sss), set Z,S flags based on result
010100dddsss - add  1ddd, 0sss - reg 1ddd = (reg 1ddd) + (reg 0sss), set K,V,Z,S flags based on result
010101dddsss - adk  1ddd, 0sss - reg 1ddd = (reg 1ddd) + (reg 0sss) + K, set K,V,Z,S flags based on result
010110dddsss - sub  1ddd, 0sss - reg 1ddd = (reg 1ddd) - (reg 0sss), set K,V,Z,S flags based on result
010111dddsss - sbk  1ddd, 0sss - reg 1ddd = (reg 1ddd) - (reg 0sss) - K, set K,V,Z,S flags based on result

01100000dddd - rol  dddd - Rotate left
01100001dddd - ror  dddd - Rotate right
01100010dddd - rkl  dddd - Rotate left through carry
01100011dddd - rkr  dddd - Rotate right through carry
01100100dddd - shl  dddd - Shift left, carry <- MSB, LSB <- zero
01100101dddd - shr  dddd - Logical shift right, zero -> MSB, LSB -> carry
011001100ddd - swp  0ddd - Swap the two half-words of the specified (near) register, or equivalently, rotate by 6 bits
011001101nnn - flg  nnn - Cause the next nnn instructions to discard their main result and affect flags only
01100111dddd - asr  dddd - Arithmetic shift right, sign -> MSB, LSB -> carry

011010cccccc - if   cccccc - P = condition
011011cccccc - ifx  cccccc - P = P XOR condition
011100xxxxxx - lda  xxxxxx - load location xxxxxx into reg A
011101xxxxxx - ldb  xxxxxx - load location xxxxxx into reg B
011110xxxxxx - ldc  xxxxxx - load location xxxxxx into reg C
011111xxxxxx - ldd  xxxxxx - load location xxxxxx into reg D

100000dddsss - cmov 0ddd, 0sss
100001dddsss - cand 0ddd, 0sss
100010dddsss - cor  0ddd, 0sss
100011dddsss - cxor 0ddd, 0sss
100100dddsss - cadd 0ddd, 0sss
100101dddsss - cadk 0ddd, 0sss
100110dddsss - csub 0ddd, 0sss
100111dddsss - csbk 0ddd, 0sss

101000dddsss - cmov 0ddd, 1sss
101001dddsss - cand 0ddd, 1sss
101010dddsss - cor  0ddd, 1sss
101011dddsss - cxor 0ddd, 1sss
101100dddsss - cadd 0ddd, 1sss
101101dddsss - cadk 0ddd, 1sss
101110dddsss - csub 0ddd, 1sss
101111dddsss - csbk 0ddd, 1sss

110000dddsss - cmov 1ddd, 0sss
110001dddsss - cand 1ddd, 0sss
110010dddsss - cor  1ddd, 0sss
110011dddsss - cxor 1ddd, 0sss
110100dddsss - cadd 1ddd, 0sss
110101dddsss - cadk 1ddd, 0sss
110110dddsss - csub 1ddd, 0sss
110111dddsss - csbk 1ddd, 0sss

11100000dddd - crol dddd
11100001dddd - cror dddd
11100010dddd - crkl dddd
11100011dddd - crkr dddd
11100100dddd - cshl dddd
11100101dddd - cshr dddd
111001100ddd - cswp 0ddd
111001101nnn - cflg nnn
11100111dddd - casr dddd

111010cccccc - ifa  cccccc - P = P AND condition
111011cccccc - ifo  cccccc - P = P OR condition
111100xxxxxx - sta  xxxxxx - store reg A into location xxxxxx
111101xxxxxx - stb  xxxxxx - store reg B into location xxxxxx
111110xxxxxx - stc  xxxxxx - store reg C into location xxxxxx
111111xxxxxx - std  xxxxxx - store reg D into location xxxxxx

Conditions:

00 to 17 - if register is zero
07 - always true
	(register 7 would normally be immediate value, but here it's zero)
20 - if zero flag / if equal
21 - if sign flag / if negative
22 - if carry flag / if unsigned <
23 - if overflow flag
24 - reserved
25 - reserved
26 - reserved
27 - reserved
30 - if unsigned >
31 - if signed <
32 - if signed >
33 - reserved
34 - reserved
35 - reserved
36 - reserved
37 - always true

40 to 57 - if register is not zero
47 - always false
	(register 7 would normally be immediate value, but here it's zero)
60 - if not zero flag / if not equal
61 - if not sign flag / if not negative
62 - if not carry flag / if unsigned >=
63 - if not overflow flag
64 - negation of 0x14 (reserved)
65 - negation of 0x15 (reserved)
66 - negation of 0x16 (reserved)
67 - negation of 0x17 (reserved)
70 - if unsigned <=
71 - if signed >=
72 - if signed <=
73 - negation of 0x1B (reserved)
74 - negation of 0x1C (reserved)
75 - negation of 0x1D (reserved)
76 - negation of 0x1E (reserved)
77 - always false

Load/store locations:

00: [INT]
	Read, inside interrupt handler: Lowest interrupt number
	Read, inside user code: 0xFFF
	Write, inside interrupt handler: Dismiss interrupt number, possibly switch to user code
	Write, inside user code: Trigger software interrupt
01: Reserved
02: Reserved
03: Reserved
04: Reserved
05: Reserved
06: Reserved
07: Reserved
10: [IM0] Interrupt mask register 0 (interrupts zero to eleven)
11: [IM1] Interrupt mask register 1 (interrupts twelve to twenty-three)
12: [AP++] (Memory at location APH:APL, postincrement)
13: [--AP] (Memory at location APH:APL, predecrement)
14: [BP++] (Memory at location BPH:BPL, postincrement)
15: [--BP] (Memory at location BPH:BPL, predecrement)
16: [CP++] (Memory at location CPH:CPL, postincrement)
17: [--CP] (Memory at location CPH:CPL, predecrement)

20-37: [AP], [AP+0] ... [AP+15] (Memory at location APH:APL, plus zero to fifteen word offset)

40-57: [BP], [BP+0] ... [BP+15] (Memory at location BPH:BPL, plus zero to fifteen word offset)

60-77: [CP], [CP+0] ... [CP+15] (Memory at location CPH:CPL, plus zero to fifteen word offset)
60-77: [CP], [CP+0] ... [CP+15] (Memory at location CPH:CPL, plus zero to fifteen word offset)